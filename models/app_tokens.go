// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AppToken is an object representing the database table.
type AppToken struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AppID     null.Uint64 `boil:"app_id" json:"app_id,omitempty" toml:"app_id" yaml:"app_id,omitempty"`
	Hash      string      `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	ExpiredAt null.Time   `boil:"expired_at" json:"expired_at,omitempty" toml:"expired_at" yaml:"expired_at,omitempty"`

	R *appTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppTokenColumns = struct {
	ID        string
	AppID     string
	Hash      string
	ExpiredAt string
}{
	ID:        "id",
	AppID:     "app_id",
	Hash:      "hash",
	ExpiredAt: "expired_at",
}

var AppTokenTableColumns = struct {
	ID        string
	AppID     string
	Hash      string
	ExpiredAt string
}{
	ID:        "app_tokens.id",
	AppID:     "app_tokens.app_id",
	Hash:      "app_tokens.hash",
	ExpiredAt: "app_tokens.expired_at",
}

// Generated where

type whereHelpernull_Uint64 struct{ field string }

func (w whereHelpernull_Uint64) EQ(x null.Uint64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint64) NEQ(x null.Uint64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint64) LT(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint64) LTE(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint64) GT(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint64) GTE(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AppTokenWhere = struct {
	ID        whereHelperuint64
	AppID     whereHelpernull_Uint64
	Hash      whereHelperstring
	ExpiredAt whereHelpernull_Time
}{
	ID:        whereHelperuint64{field: "`app_tokens`.`id`"},
	AppID:     whereHelpernull_Uint64{field: "`app_tokens`.`app_id`"},
	Hash:      whereHelperstring{field: "`app_tokens`.`hash`"},
	ExpiredAt: whereHelpernull_Time{field: "`app_tokens`.`expired_at`"},
}

// AppTokenRels is where relationship names are stored.
var AppTokenRels = struct {
	App string
}{
	App: "App",
}

// appTokenR is where relationships are stored.
type appTokenR struct {
	App *APIApp `boil:"App" json:"App" toml:"App" yaml:"App"`
}

// NewStruct creates a new relationship struct
func (*appTokenR) NewStruct() *appTokenR {
	return &appTokenR{}
}

// appTokenL is where Load methods for each relationship are stored.
type appTokenL struct{}

var (
	appTokenAllColumns            = []string{"id", "app_id", "hash", "expired_at"}
	appTokenColumnsWithoutDefault = []string{"app_id", "hash"}
	appTokenColumnsWithDefault    = []string{"id", "expired_at"}
	appTokenPrimaryKeyColumns     = []string{"id"}
)

type (
	// AppTokenSlice is an alias for a slice of pointers to AppToken.
	// This should almost always be used instead of []AppToken.
	AppTokenSlice []*AppToken
	// AppTokenHook is the signature for custom AppToken hook methods
	AppTokenHook func(context.Context, boil.ContextExecutor, *AppToken) error

	appTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appTokenType                 = reflect.TypeOf(&AppToken{})
	appTokenMapping              = queries.MakeStructMapping(appTokenType)
	appTokenPrimaryKeyMapping, _ = queries.BindMapping(appTokenType, appTokenMapping, appTokenPrimaryKeyColumns)
	appTokenInsertCacheMut       sync.RWMutex
	appTokenInsertCache          = make(map[string]insertCache)
	appTokenUpdateCacheMut       sync.RWMutex
	appTokenUpdateCache          = make(map[string]updateCache)
	appTokenUpsertCacheMut       sync.RWMutex
	appTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var appTokenBeforeInsertHooks []AppTokenHook
var appTokenBeforeUpdateHooks []AppTokenHook
var appTokenBeforeDeleteHooks []AppTokenHook
var appTokenBeforeUpsertHooks []AppTokenHook

var appTokenAfterInsertHooks []AppTokenHook
var appTokenAfterSelectHooks []AppTokenHook
var appTokenAfterUpdateHooks []AppTokenHook
var appTokenAfterDeleteHooks []AppTokenHook
var appTokenAfterUpsertHooks []AppTokenHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AppToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AppToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AppToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AppToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AppToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AppToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AppToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AppToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AppToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAppTokenHook registers your hook function for all future operations.
func AddAppTokenHook(hookPoint boil.HookPoint, appTokenHook AppTokenHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		appTokenBeforeInsertHooks = append(appTokenBeforeInsertHooks, appTokenHook)
	case boil.BeforeUpdateHook:
		appTokenBeforeUpdateHooks = append(appTokenBeforeUpdateHooks, appTokenHook)
	case boil.BeforeDeleteHook:
		appTokenBeforeDeleteHooks = append(appTokenBeforeDeleteHooks, appTokenHook)
	case boil.BeforeUpsertHook:
		appTokenBeforeUpsertHooks = append(appTokenBeforeUpsertHooks, appTokenHook)
	case boil.AfterInsertHook:
		appTokenAfterInsertHooks = append(appTokenAfterInsertHooks, appTokenHook)
	case boil.AfterSelectHook:
		appTokenAfterSelectHooks = append(appTokenAfterSelectHooks, appTokenHook)
	case boil.AfterUpdateHook:
		appTokenAfterUpdateHooks = append(appTokenAfterUpdateHooks, appTokenHook)
	case boil.AfterDeleteHook:
		appTokenAfterDeleteHooks = append(appTokenAfterDeleteHooks, appTokenHook)
	case boil.AfterUpsertHook:
		appTokenAfterUpsertHooks = append(appTokenAfterUpsertHooks, appTokenHook)
	}
}

// OneG returns a single appToken record from the query using the global executor.
func (q appTokenQuery) OneG(ctx context.Context) (*AppToken, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single appToken record from the query.
func (q appTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppToken, error) {
	o := &AppToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for app_tokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AppToken records from the query using the global executor.
func (q appTokenQuery) AllG(ctx context.Context) (AppTokenSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AppToken records from the query.
func (q appTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppTokenSlice, error) {
	var o []*AppToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AppToken slice")
	}

	if len(appTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AppToken records in the query, and panics on error.
func (q appTokenQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AppToken records in the query.
func (q appTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count app_tokens rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q appTokenQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q appTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if app_tokens exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (o *AppToken) App(mods ...qm.QueryMod) apiAppQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AppID),
	}

	queryMods = append(queryMods, mods...)

	query := APIApps(queryMods...)
	queries.SetFrom(query.Query, "`api_apps`")

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (appTokenL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppToken interface{}, mods queries.Applicator) error {
	var slice []*AppToken
	var object *AppToken

	if singular {
		object = maybeAppToken.(*AppToken)
	} else {
		slice = *maybeAppToken.(*[]*AppToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appTokenR{}
		}
		if !queries.IsNil(object.AppID) {
			args = append(args, object.AppID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appTokenR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AppID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AppID) {
				args = append(args, obj.AppID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`api_apps`),
		qm.WhereIn(`api_apps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load APIApp")
	}

	var resultSlice []*APIApp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice APIApp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for api_apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for api_apps")
	}

	if len(appTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &apiAppR{}
		}
		foreign.R.AppAppTokens = append(foreign.R.AppAppTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AppID, foreign.ID) {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &apiAppR{}
				}
				foreign.R.AppAppTokens = append(foreign.R.AppAppTokens, local)
				break
			}
		}
	}

	return nil
}

// SetAppG of the appToken to the related item.
// Sets o.R.App to related.
// Adds o to related.R.AppAppTokens.
// Uses the global database handle.
func (o *AppToken) SetAppG(ctx context.Context, insert bool, related *APIApp) error {
	return o.SetApp(ctx, boil.GetContextDB(), insert, related)
}

// SetApp of the appToken to the related item.
// Sets o.R.App to related.
// Adds o to related.R.AppAppTokens.
func (o *AppToken) SetApp(ctx context.Context, exec boil.ContextExecutor, insert bool, related *APIApp) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `app_tokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"app_id"}),
		strmangle.WhereClause("`", "`", 0, appTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AppID, related.ID)
	if o.R == nil {
		o.R = &appTokenR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &apiAppR{
			AppAppTokens: AppTokenSlice{o},
		}
	} else {
		related.R.AppAppTokens = append(related.R.AppAppTokens, o)
	}

	return nil
}

// RemoveAppG relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *AppToken) RemoveAppG(ctx context.Context, related *APIApp) error {
	return o.RemoveApp(ctx, boil.GetContextDB(), related)
}

// RemoveApp relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AppToken) RemoveApp(ctx context.Context, exec boil.ContextExecutor, related *APIApp) error {
	var err error

	queries.SetScanner(&o.AppID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("app_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.App = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AppAppTokens {
		if queries.Equal(o.AppID, ri.AppID) {
			continue
		}

		ln := len(related.R.AppAppTokens)
		if ln > 1 && i < ln-1 {
			related.R.AppAppTokens[i] = related.R.AppAppTokens[ln-1]
		}
		related.R.AppAppTokens = related.R.AppAppTokens[:ln-1]
		break
	}
	return nil
}

// AppTokens retrieves all the records using an executor.
func AppTokens(mods ...qm.QueryMod) appTokenQuery {
	mods = append(mods, qm.From("`app_tokens`"))
	return appTokenQuery{NewQuery(mods...)}
}

// FindAppTokenG retrieves a single record by ID.
func FindAppTokenG(ctx context.Context, iD uint64, selectCols ...string) (*AppToken, error) {
	return FindAppToken(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAppToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppToken(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*AppToken, error) {
	appTokenObj := &AppToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `app_tokens` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, appTokenObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from app_tokens")
	}

	if err = appTokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return appTokenObj, err
	}

	return appTokenObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AppToken) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AppToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_tokens provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appTokenInsertCacheMut.RLock()
	cache, cached := appTokenInsertCache[key]
	appTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appTokenAllColumns,
			appTokenColumnsWithDefault,
			appTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appTokenType, appTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appTokenType, appTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `app_tokens` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `app_tokens` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `app_tokens` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, appTokenPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into app_tokens")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == appTokenMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for app_tokens")
	}

CacheNoHooks:
	if !cached {
		appTokenInsertCacheMut.Lock()
		appTokenInsertCache[key] = cache
		appTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AppToken record using the global executor.
// See Update for more documentation.
func (o *AppToken) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AppToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AppToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	appTokenUpdateCacheMut.RLock()
	cache, cached := appTokenUpdateCache[key]
	appTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appTokenAllColumns,
			appTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update app_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `app_tokens` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, appTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appTokenType, appTokenMapping, append(wl, appTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update app_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for app_tokens")
	}

	if !cached {
		appTokenUpdateCacheMut.Lock()
		appTokenUpdateCache[key] = cache
		appTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q appTokenQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q appTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for app_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for app_tokens")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AppTokenSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `app_tokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in appToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all appToken")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AppToken) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLAppTokenUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AppToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_tokens provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appTokenColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAppTokenUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appTokenUpsertCacheMut.RLock()
	cache, cached := appTokenUpsertCache[key]
	appTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			appTokenAllColumns,
			appTokenColumnsWithDefault,
			appTokenColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			appTokenAllColumns,
			appTokenPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert app_tokens, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`app_tokens`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `app_tokens` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(appTokenType, appTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appTokenType, appTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for app_tokens")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == appTokenMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(appTokenType, appTokenMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for app_tokens")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for app_tokens")
	}

CacheNoHooks:
	if !cached {
		appTokenUpsertCacheMut.Lock()
		appTokenUpsertCache[key] = cache
		appTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AppToken record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AppToken) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AppToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AppToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AppToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appTokenPrimaryKeyMapping)
	sql := "DELETE FROM `app_tokens` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from app_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for app_tokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q appTokenQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q appTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no appTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from app_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for app_tokens")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AppTokenSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(appTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `app_tokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from appToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for app_tokens")
	}

	if len(appTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AppToken) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AppToken provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AppToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppToken(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppTokenSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AppTokenSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `app_tokens`.* FROM `app_tokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppTokenSlice")
	}

	*o = slice

	return nil
}

// AppTokenExistsG checks if the AppToken row exists.
func AppTokenExistsG(ctx context.Context, iD uint64) (bool, error) {
	return AppTokenExists(ctx, boil.GetContextDB(), iD)
}

// AppTokenExists checks if the AppToken row exists.
func AppTokenExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `app_tokens` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if app_tokens exists")
	}

	return exists, nil
}
