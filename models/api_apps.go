// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// APIApp is an object representing the database table.
type APIApp struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Alias     string      `boil:"alias" json:"alias" toml:"alias" yaml:"alias"`
	Appkey    null.String `boil:"appkey" json:"appkey,omitempty" toml:"appkey" yaml:"appkey,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *apiAppR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L apiAppL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var APIAppColumns = struct {
	ID        string
	Name      string
	Alias     string
	Appkey    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Alias:     "alias",
	Appkey:    "appkey",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var APIAppTableColumns = struct {
	ID        string
	Name      string
	Alias     string
	Appkey    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "api_apps.id",
	Name:      "api_apps.name",
	Alias:     "api_apps.alias",
	Appkey:    "api_apps.appkey",
	CreatedAt: "api_apps.created_at",
	UpdatedAt: "api_apps.updated_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var APIAppWhere = struct {
	ID        whereHelperuint64
	Name      whereHelperstring
	Alias     whereHelperstring
	Appkey    whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperuint64{field: "`api_apps`.`id`"},
	Name:      whereHelperstring{field: "`api_apps`.`name`"},
	Alias:     whereHelperstring{field: "`api_apps`.`alias`"},
	Appkey:    whereHelpernull_String{field: "`api_apps`.`appkey`"},
	CreatedAt: whereHelpernull_Time{field: "`api_apps`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`api_apps`.`updated_at`"},
}

// APIAppRels is where relationship names are stored.
var APIAppRels = struct {
	AppAppTokens string
}{
	AppAppTokens: "AppAppTokens",
}

// apiAppR is where relationships are stored.
type apiAppR struct {
	AppAppTokens AppTokenSlice `boil:"AppAppTokens" json:"AppAppTokens" toml:"AppAppTokens" yaml:"AppAppTokens"`
}

// NewStruct creates a new relationship struct
func (*apiAppR) NewStruct() *apiAppR {
	return &apiAppR{}
}

// apiAppL is where Load methods for each relationship are stored.
type apiAppL struct{}

var (
	apiAppAllColumns            = []string{"id", "name", "alias", "appkey", "created_at", "updated_at"}
	apiAppColumnsWithoutDefault = []string{"name", "alias", "appkey"}
	apiAppColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	apiAppPrimaryKeyColumns     = []string{"id"}
)

type (
	// APIAppSlice is an alias for a slice of pointers to APIApp.
	// This should almost always be used instead of []APIApp.
	APIAppSlice []*APIApp
	// APIAppHook is the signature for custom APIApp hook methods
	APIAppHook func(context.Context, boil.ContextExecutor, *APIApp) error

	apiAppQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	apiAppType                 = reflect.TypeOf(&APIApp{})
	apiAppMapping              = queries.MakeStructMapping(apiAppType)
	apiAppPrimaryKeyMapping, _ = queries.BindMapping(apiAppType, apiAppMapping, apiAppPrimaryKeyColumns)
	apiAppInsertCacheMut       sync.RWMutex
	apiAppInsertCache          = make(map[string]insertCache)
	apiAppUpdateCacheMut       sync.RWMutex
	apiAppUpdateCache          = make(map[string]updateCache)
	apiAppUpsertCacheMut       sync.RWMutex
	apiAppUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var apiAppBeforeInsertHooks []APIAppHook
var apiAppBeforeUpdateHooks []APIAppHook
var apiAppBeforeDeleteHooks []APIAppHook
var apiAppBeforeUpsertHooks []APIAppHook

var apiAppAfterInsertHooks []APIAppHook
var apiAppAfterSelectHooks []APIAppHook
var apiAppAfterUpdateHooks []APIAppHook
var apiAppAfterDeleteHooks []APIAppHook
var apiAppAfterUpsertHooks []APIAppHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *APIApp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *APIApp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *APIApp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *APIApp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *APIApp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *APIApp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *APIApp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *APIApp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *APIApp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAppAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAPIAppHook registers your hook function for all future operations.
func AddAPIAppHook(hookPoint boil.HookPoint, apiAppHook APIAppHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		apiAppBeforeInsertHooks = append(apiAppBeforeInsertHooks, apiAppHook)
	case boil.BeforeUpdateHook:
		apiAppBeforeUpdateHooks = append(apiAppBeforeUpdateHooks, apiAppHook)
	case boil.BeforeDeleteHook:
		apiAppBeforeDeleteHooks = append(apiAppBeforeDeleteHooks, apiAppHook)
	case boil.BeforeUpsertHook:
		apiAppBeforeUpsertHooks = append(apiAppBeforeUpsertHooks, apiAppHook)
	case boil.AfterInsertHook:
		apiAppAfterInsertHooks = append(apiAppAfterInsertHooks, apiAppHook)
	case boil.AfterSelectHook:
		apiAppAfterSelectHooks = append(apiAppAfterSelectHooks, apiAppHook)
	case boil.AfterUpdateHook:
		apiAppAfterUpdateHooks = append(apiAppAfterUpdateHooks, apiAppHook)
	case boil.AfterDeleteHook:
		apiAppAfterDeleteHooks = append(apiAppAfterDeleteHooks, apiAppHook)
	case boil.AfterUpsertHook:
		apiAppAfterUpsertHooks = append(apiAppAfterUpsertHooks, apiAppHook)
	}
}

// OneG returns a single apiApp record from the query using the global executor.
func (q apiAppQuery) OneG(ctx context.Context) (*APIApp, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single apiApp record from the query.
func (q apiAppQuery) One(ctx context.Context, exec boil.ContextExecutor) (*APIApp, error) {
	o := &APIApp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for api_apps")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all APIApp records from the query using the global executor.
func (q apiAppQuery) AllG(ctx context.Context) (APIAppSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all APIApp records from the query.
func (q apiAppQuery) All(ctx context.Context, exec boil.ContextExecutor) (APIAppSlice, error) {
	var o []*APIApp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to APIApp slice")
	}

	if len(apiAppAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all APIApp records in the query, and panics on error.
func (q apiAppQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all APIApp records in the query.
func (q apiAppQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count api_apps rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q apiAppQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q apiAppQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if api_apps exists")
	}

	return count > 0, nil
}

// AppAppTokens retrieves all the app_token's AppTokens with an executor via app_id column.
func (o *APIApp) AppAppTokens(mods ...qm.QueryMod) appTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`app_tokens`.`app_id`=?", o.ID),
	)

	query := AppTokens(queryMods...)
	queries.SetFrom(query.Query, "`app_tokens`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`app_tokens`.*"})
	}

	return query
}

// LoadAppAppTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (apiAppL) LoadAppAppTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAPIApp interface{}, mods queries.Applicator) error {
	var slice []*APIApp
	var object *APIApp

	if singular {
		object = maybeAPIApp.(*APIApp)
	} else {
		slice = *maybeAPIApp.(*[]*APIApp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &apiAppR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &apiAppR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`app_tokens`),
		qm.WhereIn(`app_tokens.app_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load app_tokens")
	}

	var resultSlice []*AppToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice app_tokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on app_tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for app_tokens")
	}

	if len(appTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AppAppTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appTokenR{}
			}
			foreign.R.App = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AppID) {
				local.R.AppAppTokens = append(local.R.AppAppTokens, foreign)
				if foreign.R == nil {
					foreign.R = &appTokenR{}
				}
				foreign.R.App = local
				break
			}
		}
	}

	return nil
}

// AddAppAppTokensG adds the given related objects to the existing relationships
// of the api_app, optionally inserting them as new records.
// Appends related to o.R.AppAppTokens.
// Sets related.R.App appropriately.
// Uses the global database handle.
func (o *APIApp) AddAppAppTokensG(ctx context.Context, insert bool, related ...*AppToken) error {
	return o.AddAppAppTokens(ctx, boil.GetContextDB(), insert, related...)
}

// AddAppAppTokens adds the given related objects to the existing relationships
// of the api_app, optionally inserting them as new records.
// Appends related to o.R.AppAppTokens.
// Sets related.R.App appropriately.
func (o *APIApp) AddAppAppTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppToken) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AppID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `app_tokens` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"app_id"}),
				strmangle.WhereClause("`", "`", 0, appTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AppID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &apiAppR{
			AppAppTokens: related,
		}
	} else {
		o.R.AppAppTokens = append(o.R.AppAppTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appTokenR{
				App: o,
			}
		} else {
			rel.R.App = o
		}
	}
	return nil
}

// SetAppAppTokensG removes all previously related items of the
// api_app replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.App's AppAppTokens accordingly.
// Replaces o.R.AppAppTokens with related.
// Sets related.R.App's AppAppTokens accordingly.
// Uses the global database handle.
func (o *APIApp) SetAppAppTokensG(ctx context.Context, insert bool, related ...*AppToken) error {
	return o.SetAppAppTokens(ctx, boil.GetContextDB(), insert, related...)
}

// SetAppAppTokens removes all previously related items of the
// api_app replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.App's AppAppTokens accordingly.
// Replaces o.R.AppAppTokens with related.
// Sets related.R.App's AppAppTokens accordingly.
func (o *APIApp) SetAppAppTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppToken) error {
	query := "update `app_tokens` set `app_id` = null where `app_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AppAppTokens {
			queries.SetScanner(&rel.AppID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.App = nil
		}

		o.R.AppAppTokens = nil
	}
	return o.AddAppAppTokens(ctx, exec, insert, related...)
}

// RemoveAppAppTokensG relationships from objects passed in.
// Removes related items from R.AppAppTokens (uses pointer comparison, removal does not keep order)
// Sets related.R.App.
// Uses the global database handle.
func (o *APIApp) RemoveAppAppTokensG(ctx context.Context, related ...*AppToken) error {
	return o.RemoveAppAppTokens(ctx, boil.GetContextDB(), related...)
}

// RemoveAppAppTokens relationships from objects passed in.
// Removes related items from R.AppAppTokens (uses pointer comparison, removal does not keep order)
// Sets related.R.App.
func (o *APIApp) RemoveAppAppTokens(ctx context.Context, exec boil.ContextExecutor, related ...*AppToken) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AppID, nil)
		if rel.R != nil {
			rel.R.App = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("app_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AppAppTokens {
			if rel != ri {
				continue
			}

			ln := len(o.R.AppAppTokens)
			if ln > 1 && i < ln-1 {
				o.R.AppAppTokens[i] = o.R.AppAppTokens[ln-1]
			}
			o.R.AppAppTokens = o.R.AppAppTokens[:ln-1]
			break
		}
	}

	return nil
}

// APIApps retrieves all the records using an executor.
func APIApps(mods ...qm.QueryMod) apiAppQuery {
	mods = append(mods, qm.From("`api_apps`"))
	return apiAppQuery{NewQuery(mods...)}
}

// FindAPIAppG retrieves a single record by ID.
func FindAPIAppG(ctx context.Context, iD uint64, selectCols ...string) (*APIApp, error) {
	return FindAPIApp(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAPIApp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAPIApp(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*APIApp, error) {
	apiAppObj := &APIApp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `api_apps` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, apiAppObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from api_apps")
	}

	if err = apiAppObj.doAfterSelectHooks(ctx, exec); err != nil {
		return apiAppObj, err
	}

	return apiAppObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *APIApp) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *APIApp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no api_apps provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiAppColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	apiAppInsertCacheMut.RLock()
	cache, cached := apiAppInsertCache[key]
	apiAppInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			apiAppAllColumns,
			apiAppColumnsWithDefault,
			apiAppColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(apiAppType, apiAppMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(apiAppType, apiAppMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `api_apps` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `api_apps` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `api_apps` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, apiAppPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into api_apps")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == apiAppMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for api_apps")
	}

CacheNoHooks:
	if !cached {
		apiAppInsertCacheMut.Lock()
		apiAppInsertCache[key] = cache
		apiAppInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single APIApp record using the global executor.
// See Update for more documentation.
func (o *APIApp) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the APIApp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *APIApp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	apiAppUpdateCacheMut.RLock()
	cache, cached := apiAppUpdateCache[key]
	apiAppUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			apiAppAllColumns,
			apiAppPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update api_apps, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `api_apps` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, apiAppPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(apiAppType, apiAppMapping, append(wl, apiAppPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update api_apps row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for api_apps")
	}

	if !cached {
		apiAppUpdateCacheMut.Lock()
		apiAppUpdateCache[key] = cache
		apiAppUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q apiAppQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q apiAppQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for api_apps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for api_apps")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o APIAppSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o APIAppSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `api_apps` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, apiAppPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in apiApp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all apiApp")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *APIApp) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLAPIAppUniqueColumns = []string{
	"id",
	"name",
	"alias",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *APIApp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no api_apps provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiAppColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAPIAppUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	apiAppUpsertCacheMut.RLock()
	cache, cached := apiAppUpsertCache[key]
	apiAppUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			apiAppAllColumns,
			apiAppColumnsWithDefault,
			apiAppColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			apiAppAllColumns,
			apiAppPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert api_apps, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`api_apps`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `api_apps` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(apiAppType, apiAppMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(apiAppType, apiAppMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for api_apps")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == apiAppMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(apiAppType, apiAppMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for api_apps")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for api_apps")
	}

CacheNoHooks:
	if !cached {
		apiAppUpsertCacheMut.Lock()
		apiAppUpsertCache[key] = cache
		apiAppUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single APIApp record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *APIApp) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single APIApp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *APIApp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no APIApp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), apiAppPrimaryKeyMapping)
	sql := "DELETE FROM `api_apps` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from api_apps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for api_apps")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q apiAppQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q apiAppQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no apiAppQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from api_apps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for api_apps")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o APIAppSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o APIAppSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(apiAppBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `api_apps` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, apiAppPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from apiApp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for api_apps")
	}

	if len(apiAppAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *APIApp) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no APIApp provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *APIApp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAPIApp(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *APIAppSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty APIAppSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *APIAppSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := APIAppSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `api_apps`.* FROM `api_apps` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, apiAppPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in APIAppSlice")
	}

	*o = slice

	return nil
}

// APIAppExistsG checks if the APIApp row exists.
func APIAppExistsG(ctx context.Context, iD uint64) (bool, error) {
	return APIAppExists(ctx, boil.GetContextDB(), iD)
}

// APIAppExists checks if the APIApp row exists.
func APIAppExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `api_apps` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if api_apps exists")
	}

	return exists, nil
}
